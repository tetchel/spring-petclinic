name: E2E OpenShift Pet Clinic Buildah Workflow
on: [ push, workflow_dispatch ]
env:
  IMAGE_REGISTRY: quay.io
  QUAY_USER: tetchell
  APP_BASENAME: petclinic
  APP_PORT: 8080
  TEST_NAMESPACE: tetchell-code

jobs:
  ####################################################################################################
  compile:
    name: Compile
    runs-on: ubuntu-20.04
    outputs:
      jarname: ${{ steps.get-jarname.outputs.jarname }}
    env:
      TARGET_DIR: target/
    steps:
    - uses: actions/checkout@v2

    - name: Hash Maven files
      run: |
        echo "MVN_HASH=${{ hashFiles('pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV

    - name: Look for existing cache
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ env.MVN_HASH }}

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - run: java -version

    - run: mvn -ntp -B package

    # If there was no cache hit above, store the output into the cache now.
    - name: Update cache
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ env.MVN_HASH }}

    # Store the output jar into the env for reuse below.
    # It will contain, eg. "spring-petclinic-2.3.0.BUILD-SNAPSHOT.jar"
    - name: Get jar filename
      id: get-jarname
      run: |
        export JAR_NAME="$(basename $(ls target/*.jar))"
        echo "Petclinic jar is $JAR_NAME"
        echo "::set-output name=jarname::$JAR_NAME"
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JAR_NAME }}
        path: ${{ env.TARGET_DIR }}/${{ env.JAR_NAME }}
        if-no-files-found: error

  ####################################################################################################
  build-push-image:
    name: Build and Push to Quay
    runs-on: ubuntu-20.04
    needs: compile
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
      image-url: ${{ steps.push-to-quay.outputs.image-url }}
    env:
      JAR_NAME: ${{ needs.compile.outputs.jarname }}
      IMAGE_TAG: latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.JAR_NAME }}

      - name: Set tag
        id: set-tag
        run: |
          export IMAGE_TAG="${GITHUB_SHA::7}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=image-tag::$IMAGE_TAG"

      - name: Build Image
        uses: redhat-actions/buildah-action@v1
        with:
          image: ${{ env.APP_BASENAME }}
          tag: ${{ env.IMAGE_TAG }}
          base-image: docker.io/fabric8/java-alpine-openjdk11-jre
          content: ${{ env.JAR_NAME }}
          entrypoint: |
            java
            -jar
            ${{ env.JAR_NAME }}
          port: ${{ env.CONTAINER_PORT }}

      - name: Push to Quay
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v1
        with:
          image: ${{ env.APP_BASENAME }}
          tag: ${{ env.IMAGE_TAG }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.QUAY_USER }}
          username: ${{ env.QUAY_USER }}
          password: ${{ secrets.QUAY_PASSWORD }}

  ####################################################################################################
  openshift-deploy:
    name: Deploy on OpenShift
    runs-on: ubuntu-20.04
    needs: build-push-image
    defaults:
      run:
        working-directory: manifests
    env:
      BUILT_MANIFEST: petclinic.yml
      IMAGE_URL: ${{ needs.build-push-image.outputs.image-url }}
      TAG: ${{ needs.build-push-image.outputs.image-tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Generate manifest
        run: |
          export APP_NAME=${APP_BASENAME}-${TAG}
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          ./generate-manifest.sh

      - name: Upload manifest
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILT_MANIFEST }}
          path: manifests/${{ env.BUILT_MANIFEST }}
          if-no-files-found: error

      - name: OpenShift login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.TEST_NAMESPACE }}

      - name: Apply manifest
        id: apply-manifest
        run: oc create -f ${{ env.BUILT_MANIFEST }}

      - name: View deployed resources
        run: oc get -f ${{ env.BUILT_MANIFEST }}

      - name: Get public route
        run: |
          export HOST=$(oc get route $APP_NAME -o jsonpath='{.spec.host}')
          [[ -n $HOST ]]   # Check non-empty
          export PROJECT_ROUTE=http://$HOST
          echo "Project route is $PROJECT_ROUTE"
          echo "PROJECT_ROUTE=$PROJECT_ROUTE" >> $GITHUB_ENV

      - name: Pause to allow pod to come up
        run: sleep 10

      - name: Test project is running
        id: test-project
        uses: nick-invision/retry@v2.2.0
        with:
          timeout_seconds: 5
          retry_wait_seconds: 15
          max_attempts: 10
          warning_on_retry: false
          command: curl -sSfLi ${{ env.PROJECT_ROUTE }}

      - name: Debug failed test
        if: ${{ steps.test-project.outcome }} == "failure"
        run: |
          oc describe -f ${{ env.BUILT_MANIFEST }}

      - name: Clean up deployed resources
        if: always()
        run: oc delete -f ${{ env.BUILT_MANIFEST }}
